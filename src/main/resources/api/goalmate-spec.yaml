openapi: 3.0.3
info:
  title: GoalMate API
  description: |-
    CMC GoalMate API 입니다.
  contact:
    email: goalmate@gmail.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0

servers:
  - url: http://localhost:8080
    description: Optional server description, e.g. Main (production) server

tags:
  - name: Auth
    description: 인증 API
  - name: Mentee
    description: 멘티 API
  - name: Goal
    description: 목표 API
  - name: MenteeGoal
    description: 멘티 목표 API

paths:
  # Auth
  /auth/login:
    post:
      tags:
        - Auth
      summary: 소셜 로그인 (회원가입)
      description: 소셜 로그인을 통해 로그인 또는 회원가입을 진행합니다. 로그인 완료 시 200, 회원가입 성공 시 201이 응답됩니다.
      operationId: loginOrSignUp
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OAuthRequest'
      responses:
        '200':
          description: 로그인 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/LoginResponse'
        '201':
          description: 회원가입 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/LoginResponse'
  /auth/logout:
    post:
      tags:
        - Auth
      summary: 로그아웃
      description: 로그아웃을 진행합니다. 액세스 토큰과 리프레시 토큰이 파기됩니다. (후순위)
      operationId: logout
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: 로그아웃 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
  /auth/reissue:
    put:
      tags:
        - Auth
      summary: 토큰 재발급
      description: 토큰 재발급을 진행합니다. 리프레시 토큰이 필요합니다. (후순위)
      operationId: reissue
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: 재발급 성공
  /auth/withdraw:
    delete:
      tags:
        - Auth
      summary: 회원탈퇴
      description: 회원 탈퇴를 진행합니다.
      operationId: withdraw
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: 탈퇴 성공

  # Mentee
  /mentees/my:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - Mentee
      summary: 멘티 기본 정보
      description: 멘티 기본 정보를 조회합니다.
      operationId: getMenteeInfo
      responses:
        '200':
          description: 멘티 기본 정보 및 간단한 목표 현황을 반환합니다.
  /mentees/my/name:
    put:
      security:
        - bearerAuth: [ ]
      tags:
        - Mentee
      summary: 멘티 이름 설정
      description: 멘티 이름을 설정합니다.
      operationId: updateMenteeName
      parameters:
        - name: name
          in: query
          required: true
          description: 멘티 이름
          schema:
            type: string
            example: 김멘티
      responses:
        '200':
          description: 이름 설정 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '409':
          description: 중복된 이름
  /mentees/name/validate:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - Mentee
      summary: 멘티 이름 중복 확인
      description: 멘티 이름의 중복 확인을 진행합니다.
      operationId: validateMenteeName
      parameters:
        - name: name
          in: query
          description: 멘티 이름
          required: true
          schema:
            type: string
            example: 멘티1
      responses:
        '200':
          description: 이름 중복 확인 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
        '409':
          description: 중복된 이름
  /mentees/my/goals:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - MenteeGoal
      summary: 멘티 목표 리스트 조회
      description: 멘티가 참여한 목표들을 조회합니다.
      operationId: getMenteeGoals
      responses:
        '200':
          description: 조회 성공. (리스트) 목표별 멘토명, 진행기간, 달성율을 포함합니다.

  /mentees/my/goals/{goalId}:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - MenteeGoal
      summary: 멘티의 목표 세부정보 조회
      description: 멘티의 목표의 세부정보를 조회합니다. 쿼리 파라미터로 날짜가 필요합니다. 존재하지 않을 시, 오늘의 정보를 가져옵니다.
      operationId: getMenteeGoalDetails
      parameters:
        - name: goalId
          in: path
          required: true
          schema:
            type: integer
          description: 조회할 멘티목표 ID
        - name: date
          in: query
          required: false
          schema:
            type: string
            format: date
          description: 조회할 날짜
      responses:
        '200':
          description: 조회 성공. 오늘 할 일 리스트, 진척도 정보(오늘, 전체), 멘토 코멘트, 목표명, 멘토를 포함합니다.
  /mentees/my/goal/{goalId}/todos/{todoId}:
    post:
      security:
        - bearerAuth: [ ]
      tags:
        - MenteeGoal
      summary: 멘티의 목표 투두 업데이트
      description: 멘티의 목표에 대해 투두 상태를 업데이트 합니다.
      operationId: updateMenteeGoalTodoStatus
      parameters:
        - name: goalId
          in: path
          required: true
          schema:
            type: integer
          description: 업데이트할 멘티목표 ID
        - name: todoId
          in: path
          required: true
          schema:
            type: integer
          description: 조회할 투두 ID
      responses:
        '200':
          description: 업데이트 성공. 투두 상태, 진척도가 업데이트된 목표 세부정보를 재반환합니다.
  /mentees/my/goal/{goalId}/comments:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - MenteeGoal
      summary: 멘티의 목표 멘토 코멘트 조회
      description: 멘티의 목표에 대해 멘토가 작성한 코멘트를 날짜 내림차순으로 조회합니다.
      operationId: getMenteeGoalComments
      parameters:
        - name: goalId
          in: path
          required: true
          schema:
            type: integer
          description: 조회할 멘티목표 ID
      responses:
        '200':
          description: 조회 성공. (리스트) 멘티의 코멘트를 날짜 내림차순으로 반환합니다.

  # Goals
  /goals:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - Goal
      summary: 목표 리스트 조회
      description: 목표를 최신순으로 조회합니다.
      operationId: getGoals
      parameters:
        - name: page
          in: query
          description: 페이지 번호 (1부터 시작)
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: size
          in: query
          description: 페이지당 아이템 수
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
      responses:
        '200':
          description: 조회 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          goals:
                            type: array
                            items:
                              $ref: '#/components/schemas/GoalSummaryResponse'
                          page:
                            $ref: '#/components/schemas/PageResponse'
  /goals/{goalId}:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - Goal
      summary: 목표 세부정보 조회
      description: 목표 세부정보를 조회합니다.
      operationId: getGoalDetails
      parameters:
        - name: goalId
          in: path
          required: true
          schema:
            type: integer
          description: 조회할 목표의 ID
      responses:
        '200':
          description: 조회 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/GoalDetailResponse'
  /goals/{goalId}/mentees:
    post:
      security:
        - bearerAuth: [ ]
      tags:
        - Goal
      summary: 목표 시작
      description: 멘티가 목표 시작하기 버튼을 눌러 참여합니다.
      operationId: registerMentee
      parameters:
        - name: goalId
          in: path
          required: true
          schema:
            type: integer
          description: 참여할 목표의 ID
      responses:
        '200':
          description: 참여 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '403':
          description: 이미 마감된 목표
        '404':
          description: 존재하지 않는 목표
        '409':
          description: 이미 참여중인 목표

components:
  schemas:
    # Request DTO
    OAuthRequest:
      type: object
      properties:
        identity_token:
          type: string
        nonce:
          type: string
        provider:
          type: string
          enum:
            - KAKAO
            - APPLE
      required:
        - identity_token
        - provider
      example:
        identity_token: identity_token
        nonce: 임의의 nonce 값
        provider: APPLE

    # Response Dto
    LoginResponse:
      type: object
      properties:
        access_token:
          type: string
          example: <header>.<payload>.<signature>
        refresh_token:
          type: string
          example: <header>.<payload>.<signature>
      required:
        - access_token
        - refresh_token
    GoalSummaryResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: 1일 1커밋 챌린지
        topic:
          type: string
          example: 코딩
        description:
          type: string
          example: "하루에 한 번씩 커밋하는 챌린지입니다."
        period:
          type: integer
          example: 30
        start_date:
          type: string
          format: date
          example: "2025-01-01"
        end_date:
          type: string
          format: date
          example: "2025-01-30"
        price:
          type: integer
          example: 100000
        discount_price:
          type: integer
          example: 85000
        participants_limit:
          type: integer
          example: 100
        free_participants_limit:
          type: integer
          example: 50
        goal_status:
          type: string
          description: "NOT_STARTED / IN_PROGRESS / COMPLETED"
          example: "NOT_STARTED"
        main_image:
          type: string
          example: "https://image.url"
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    GoalDetailResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: 1일 1커밋 챌린지
        topic:
          type: string
          example: 코딩
        description:
          type: string
          example: "매일 깃에 커밋하며 기록하는 챌린지입니다."
        period:
          type: integer
          example: 30
        start_date:
          type: string
          format: date
          example: "2025-01-01"
        end_date:
          type: string
          format: date
          example: "2025-01-30"
        price:
          type: integer
          example: 100000
        discount_price:
          type: integer
          example: 85000
        participants_limit:
          type: integer
          example: 100
        free_participants_limit:
          type: integer
          example: 50
        goal_status:
          type: string
          description: "NOT_STARTED / IN_PROGRESS / COMPLETED"
          example: "IN_PROGRESS"
        mid_objectives:
          type: array
          items:
            $ref: '#/components/schemas/MidObjectiveResponse'
        weekly_objectives:
          type: array
          items:
            $ref: '#/components/schemas/WeeklyObjectiveResponse'
        thumbnail_images:
          type: array
          items:
            type: string
            example: "https://image.url"
        body_images:
          type: array
          items:
            type: string
            example: "https://image.url"
        daily_todos:
          type: array
          items:
            $ref: '#/components/schemas/DailyTodoResponse'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    MidObjectiveResponse:
      type: object
      properties:
        description:
          type: string
          description: 중간 목표 설명
          example: "깃허브 세팅 및 프로젝트 관리법에 대해 학습한다."
    WeeklyObjectiveResponse:
      type: object
      properties:
        week_number:
          type: integer
          description: 현재 주차
          example: 1
        description:
          type: string
          description: 목표 주차별 상세 설명
          example: "깃허브 기본 사용법 숙지 및 리포지토리 생성"
    DailyTodoResponse:
      type: object
      properties:
        todo_date:
          type: string
          format: date
          example: "2025-01-02"
        description:
          type: string
          example: "오늘의 커밋 진행하기"
    PageResponse:
      type: object
      properties:
        totalElements:
          type: integer
          description: 전체 아이템 개수
          example: 123
        totalPages:
          type: integer
          description: 전체 페이지 수
          example: 13
        currentPage:
          type: integer
          description: 현재 페이지 번호
          example: 2
        pageSize:
          type: integer
          description: 한 페이지당 아이템 수
          example: 10
        hasNext:
          type: boolean
          description: 다음 페이지가 존재하는지 여부
          example: true
        hasPrevious:
          type: boolean
          description: 이전 페이지가 존재하는지 여부
          example: true
        nextPage:
          type: integer
          description: 다음 페이지 번호 (다음 페이지가 없으면 null 또는 현재 값과 동일하게 처리 가능)
          example: 3
        prevPage:
          type: integer
          description: 이전 페이지 번호 (이전 페이지가 없으면 null 또는 1로 고정 등 처리 가능)
          example: 1
      required:
        - totalElements
        - totalPages
        - currentPage
        - pageSize
        - hasNext
        - hasPrevious

    # 공통응답. Data 필드를 제외한 부분이며, Data 필드에 들어갈 정보는 Response component로!
    ApiResponse:
      type: object
      properties:
        status:
          type: string
          enum:
            - SUCCESS
            - ERROR
        code:
          type: string
          example: 200
        message:
          type: string
          example: 정상적으로 처리되었습니다.
      required:
        - status
        - code
        - message


  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
