openapi: 3.0.3
info:
  title: GoalMate API
  description: >
    
    ### 공통응답
    
    모든 응답은 아래와 같은 필드를 포함합니다.
    모든 응답은 아래와 같은 필드를 포함합니다.
    
      - `status`
    
        : 응답 상태 ***(SUCCESS/ERROR)***
      - `code`
    
        : 응답 코드***(200/201/E400/E401/E403/E404/E409...)***를 나타냅니다. 에러 코드는 Prefix로 `E`를 사용합니다.
      - `message`
    
        : 응답에 대한 설명을 포함합니다. 에러 응답의 경우 에러 메시지를 포함합니다.
      - `data`
    
        : 응답 데이터. 데이터가 없는 경우 null을 반환합니다.
    
    ### 페이징
    
    모든 페이징 응답은 아래와 같은 필드를 포함합니다.
    
      - `totalElements`: 전체 아이템 수
      - `totalPages`: 전체 페이지 수
      - `currentPage`: 현재 페이지 번호
      - `pageSize`: 페이지당 아이템 수
      - `nextPage`: 다음 페이지 번호 (`다음 페이지가 없는 경우 null`)
      - `prevPage`: 이전 페이지 번호 (`이전 페이지가 없는 경우 null`)
      - `hasNext`: 다음 페이지 존재 여부
      - `hasPrev`: 이전 페이지 존재 여부
    
    ### 기타 주의사항
    
      1. API 우측 상단 자물쇠 아이콘이 있는 API는 인증이 필요한 API입니다.
      2. 인증이 필요한 API는 `bearerAuth`를 사용하며, 헤더 형식은 `Authorization: Bearer <access_token>`입니다.
      3. 스웨거로 테스트 시에는 우측 상단의 Authorization 버튼을 이용하며, Bearer 는 생략합니다.
      4. 인증이 필요한 API는 `401(잘못된 토큰)` 또는 `403(권한 없음)` 에러가 발생할 수 있습니다.
      5. 응답의 `"links": []` 필드는 현재는 사용하지 않습니다.

  contact:
    email: dhxl50@khu.ac.kr
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: Beta 1.0.0

servers:
  - url: http://3.39.253.230
    description: 개발 서버
  - url: http://localhost:8080
    description: 로컬 서버

tags:
  - name: Auth
    description: 인증 API
  - name: Admin
    description: 관리자 API
  - name: Mentee
    description: 멘티 API
  - name: Mentor
    description: 멘토 API
  - name: Goal
    description: 목표 API
  - name: MenteeGoal
    description: 멘티 목표 API
  - name: Comment
    description: 코멘트 관련 API

paths:
  # Auth
  /auth/login:
    post:
      tags:
        - Auth
      summary: 소셜 로그인 (회원가입)
      description: >
        ## 개요
        
        소셜 로그인을 통해 로그인 또는 회원가입을 진행합니다. 로그인 완료 시 200, 회원가입 성공 시 201이 응답됩니다.
        
        로그인 흐름은 아래와 같습니다.
        
          1. 사용자가 버튼을 클릭하면 SDK를 통해 소셜 로그인을 진행합니다.
          2. 소셜 로그인 완료 시 발급된 identity token을 nonce, provider와 함께 서버로 전송합니다.
          3. 서버에서 identity token을 검증하고, 회원가입 또는 로그인을 진행합니다.
          4. 처리된 결과에 따라 200 또는 201을 응답합니다. 201 응답 시 닉네임 설정 페이지로 이동합니다.
        
        ## 요청 설명
          - `identity_token`: Provider의 identity token
          - `nonce`: 임의의 nonce 값
          - `provider`: 소셜 로그인 제공자 (KAKAO, APPLE)
      operationId: loginOrSignUp
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OAuthRequest'
      responses:
        '200':
          description: 로그인 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/LoginResponse'
        '201':
          description: 회원가입 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/LoginResponse'
  /auth/login/metor:
    post:
      tags:
        - Auth
      summary: 멘토 로그인
      description: >
        ## 개요
        멘토 로그인
          - id
          - password
      operationId: loginMentor
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  example: "mentor1@example.com"
                password:
                  type: string
                  example: "password"
              required:
                - id
                - password
      responses:
        '200':
          description: 로그인 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/LoginResponse'
        '201':
          description: 회원가입 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/LoginResponse'
  /auth/login/admin:
    post:
      tags:
        - Auth
      summary: 관리자 로그인
      description: >
        ## 개요
        관리자 로그인
          - id
          - password
      operationId: loginAdmin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  example: "admin"
                password:
                  type: string
                  example: "admin"
              required:
                - id
                - password
      responses:
        '200':
          description: 로그인 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/LoginResponse'
        '201':
          description: 회원가입 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/LoginResponse'
  /auth/logout:
    post:
      tags:
        - Auth
      summary: 로그아웃
      description: >
        ## 개요
        
        로그아웃을 진행합니다. 액세스 토큰과 리프레시 토큰을 파기해주세요.
      operationId: logout
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: 로그아웃 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
  /auth/reissue:
    put:
      tags:
        - Auth
      summary: 토큰 재발급
      description: >
        ## 개요
        
        토큰 재발급을 진행합니다.
        
        토큰 재발급은 총 3가지 상황으로 구분됩니다.
        
          1. refresh_token 이 유효한 경우 : access_token 의 만료 여부와 상관없이 두 토큰 모두 재발급됩니다. (200)
          2. refresh_token 이 유효하지 않은 경우 : UNAUTHORIZED 응답을 반환하며, 재 로그인이 필요합니다. (401)
      operationId: reissue
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refresh_token:
                  type: string
                  example: <header>.<payload>.<signature>
      responses:
        '200':
          description: 로그인 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/LoginResponse'
        '401':
          description: 리프레시 토큰 만료
  /auth/validate:
    get:
      tags:
        - Auth
      summary: 토큰 유효성 확인
      description: >
        ## 개요
        
        액세스 토큰의 유효성을 확인합니다. 유효한 토큰인 경우 200을 반환합니다.
      operationId: validateToken
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: 유효한 토큰
        '401':
          description: 유효하지 않은 토큰

  /auth/withdraw:
    delete:
      tags:
        - Auth
      summary: 회원탈퇴
      description: >
        ## 개요
        
        회원탈퇴를 진행합니다. 액세스 토큰과 리프레시 토큰을 파기해주세요.
      operationId: withdraw
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: 탈퇴 성공

  # Mentee
  /mentees/my:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - Mentee
      summary: 멘티 기본 정보
      description: >
        ## 개요
        
        멘티 기본 정보 및 간단한 목표 현황을 조회합니다.
        
        ## 응답 설명
        
        이름, 진행 중인 목표 수, 완료한 목표 수, 무료 참여 횟수(기본값 1), 멘티 상태를 포함합니다.
        
        ### 멘티 상태
          - `PENDING`: 승인 대기 중 (닉네임 미설정) > 닉네임 설정 후 `ACTIVE`로 변경
          - `ACTIVE`: 멘티 활동 중
          - `DELETED`: 멘티 탈퇴
        
        ## Nullable Fields
          - `name`: 이름이 설정되지 않은 경우 null
      operationId: getMenteeInfo
      responses:
        '200':
          description: 조회 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/MenteeInfoResponse'
  /mentees/my/name:
    put:
      security:
        - bearerAuth: [ ]
      tags:
        - Mentee
      summary: 멘티 이름 설정
      description: 멘티 이름을 설정합니다.
      operationId: updateMenteeName
      parameters:
        - name: name
          in: query
          required: true
          description: 멘티 이름
          schema:
            type: string
            example: 김멘티
      responses:
        '200':
          description: 이름 설정 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: string
                        example: 설정 된 이름
        '409':
          description: 중복된 이름
  /mentees/name/validate:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - Mentee
      summary: 멘티 이름 유효성 확인
      description: >
        ## 개요
        
        멘티 이름의 중복 확인을 진행합니다.
        
        ### 응답 설명
        
        - `is_available`: 이름 사용 가능 여부 (중복 여부)
          - `true`: 사용 가능한 이름
          - `false`: 이미 사용 중인 이름
      operationId: checkNameAvailability
      parameters:
        - name: name
          in: query
          description: 멘티 이름
          required: true
          schema:
            type: string
            example: 김멘티
      responses:
        '200':
          description: 조회 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/NameAvailabilityResponse'
        '409':
          description: 중복된 이름

  /uploads:
    post:
      tags:
        - File
      summary: 이미지 업로드
      description: >
        ## 개요
        
        이미지를 업로드합니다. 업로드된 이미지 URL이 반환되며, 24시간 안에 사용되지 않은 이미지는 자동 삭제됩니다.
        
        ## 요청 설명
        
        - `file`: 이미지 파일 (멀티파트)

      operationId: uploadImage
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '201':
          description: 업로드 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: string
                        example: "https://image.url"

  # Goals
  /goals:
    get:
      tags:
        - Goal
      summary: 목표 목록 조회
      description: >
        ## 개요
        
        목표 목록을 페이지네이션하여 조회합니다.  
        
        ## 응답 설명
        
        ### goal_status: 목표의 현재 상태
          - `UPCOMING`: 모집 시작 전 목표
          - `OPEN`: 모집 중인 목표
          - `CLOSED`: 모집 종료된 목표
        
        ## Nullable Fields
          - `main_image`: 메인 이미지가 없는 경우 null

      operationId: getGoals
      parameters:
        - name: page
          in: query
          description: 페이지 번호 (1부터 시작)
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: size
          in: query
          description: 페이지당 아이템 수
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
      responses:
        '200':
          description: 조회 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/GoalSummaryPagingResponse'
    post:
      tags:
        - Goal
      summary: "[멘토] 목표 생성"
      description: >
        ## 개요
        
        새로운 목표를 생성합니다. 목표가 생성되면 목표 ID가 반환됩니다.
        
        ## 요청 설명
        
        아래의 필드들은 배열로 여러 개의 값을 받을 수 있습니다.
        
          - `mid_objectives`: 중간 목표 설명 (1부터 시작)
          - `weekly_objectives`: 주차별 목표 설명 (1주차부터 시작)
          - `thumbnail_images`: 썸네일 이미지 URL. 첫 번째 이미지가 메인 이미지로 사용됩니다.
          - `content_images`: 목표 상세 이미지 URL

      operationId: createGoal
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoalCreateRequest'
      responses:
        '201':
          description: 생성 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: integer
                        format: int64
                        example: 1
                        description: 생성된 목표의 ID
  /goals/{goalId}:
    get:
      tags:
        - Goal
      summary: 목표 세부정보 조회
      description: >
        ## 개요
        
        목표 세부정보를 조회합니다.
        
        ## 응답 설명
        
        ### goal_status: 목표의 현재 상태
          - `UPCOMING`: 모집 시작 전 목표
          - `OPEN`: 모집 중인 목표
          - `CLOSED`: 모집 종료된 목표

        ## Nullable Fields
          - `main_image`: 메인 이미지가 없는 경우 null
      operationId: getGoalDetails
      parameters:
        - name: goalId
          in: path
          required: true
          schema:
            type: integer
          description: 목표 ID
      responses:
        '200':
          description: 조회 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/GoalDetailResponse'
  /goals/{goalId}/mentees:
    post:
      security:
        - bearerAuth: [ ]
      tags:
        - Goal
      summary: 목표 참여
      description: >
        ## 개요
        
        멘티가 목표 시작하기 버튼을 눌러 참여합니다.
        
        ## 응답 설명
        
        생성된 멘티의 목표(mentee_goal) ID를 반환합니다. `목표 ID`와 `멘티 목표 ID`는 서로 다른 값입니다.
      operationId: participateInGoal
      parameters:
        - name: goalId
          in: path
          required: true
          schema:
            type: integer
          description: 참여할 목표의 ID
      responses:
        '200':
          description: 참여 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: integer
                        format: int64
                        example: 1
                        description: 생성된 멘티의 목표 ID
        '403':
          description: 참여 인원 초과 또는 무료 참여 횟수 초과
        '404':
          description: 존재하지 않는 목표
        '409':
          description: 이미 참여중인 목표

  # MenteeGoal
  /mentees/my/goals:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - MenteeGoal
      summary: 멘티 목표 리스트 조회
      description: >
        ## 개요
        
        멘티가 참여한 목표들을 조회합니다.
        
        ## 응답 설명
        
        ### mentee_goal_status: 멘티 목표의 상태
          - `IN_PROGRESS`: 진행 중인 멘티목표
          - `COMPLETED`: 완료된 멘티목표
          - `FAILED`: 실패한 멘티목표
          - `CANCELED`: 취소된 멘티목표
        
        ## Nullable Fields
          - `main_image`: 메인 이미지가 없는 경우 null
          - `mentor_letter`: 멘토의 편지가 없는 경우 null

      operationId: getMenteeGoals
      parameters:
        - name: page
          in: query
          description: 페이지 번호 (1부터 시작)
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: size
          in: query
          description: 페이지당 아이템 수
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
      responses:
        '200':
          description: 조회 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/MenteeGoalSummaryPagingResponse'
  /mentees/my/goals/{menteeGoalId}:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - MenteeGoal
      summary: 멘티의 목표 일일 세부정보 조회
      description: >
        ## 개요
        
        멘티의 목표의 일일 세부정보를 조회하며, 이는 투두 리스트와 진척도를 포함합니다.  
        
        `date`의 기본값은 조회일로, 조회일의 투두 리스트를 반환합니다.
        
        `mentee_goal`의 ID와 `goal`의 ID는 서로 다른 값이니 주의해주세요. 
        
        ## 응답 설명
        
        ### todo_status: 투두의 상태
          - `TODO`: 진행 중인 투두
          - `COMPLETED`: 완료된 투두
        
        ## Nullable Fields
          - `main_image`: 메인 이미지가 없는 경우 null
          - `mentor_letter`: 멘토의 편지가 없는 경우 null
          - `todos.mentor_tip`: 멘토의 팁이 없는 경우 null

      operationId: getMenteeGoalDailyDetails
      parameters:
        - name: menteeGoalId
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: 멘티목표 ID
        - name: date
          in: query
          required: false
          schema:
            type: string
            format: date
          description: 날짜
      responses:
        '200':
          description: 조회 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/MenteeGoalDailyDetailResponse'
  /mentees/my/goals/{menteeGoalId}/weekly-progress:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - MenteeGoal
      summary: 주간 목표 진척도 조회
      description: >
        ## 개요
        
        멘티의 목표 진척도를 주 단위로 조회하며, 페이지 크기는 7로 고정됩니다.  
        
        `date`의 기본값은 조회일로, 조회일의 투두 리스트를 반환합니다.  
        
        주의 시작은 일요일이며, 일요일 ~ 월요일 순으로 진척도가 제공됩니다.  
        
        존재하지 않는 주의 진척도(count)는 0으로 표시되고, is_valid가 false로 반환됩니다.  
        
        ## 응답 설명
        
        ### day_of_week: 요일
            - `SUNDAY`: 일요일
            - `MONDAY`: 월요일
            - `TUESDAY`: 화요일
            - `WEDNESDAY`: 수요일
            - `THURSDAY`: 목요일
            - `FRIDAY`: 금요일
            - `SATURDAY`: 토요일
        
        ### is_valid: Todo가 있는 날인지 여부
          - `true`: Todo가 있는 날
          - `false`: Todo가 없는 날 > 모든 count 0으로 표시

      operationId: getMenteeGoalWeeklyProgress
      parameters:
        - name: menteeGoalId
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: 멘티목표 ID
        - name: date
          in: query
          required: false
          schema:
            type: string
            format: date
          description: 날짜
      responses:
        '200':
          description: 조회 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/MenteeGoalWeeklyProgressResponse'
  /mentees/my/todos:
    # 오늘 해야할 일이 남았는지 확인용
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - MenteeGoal
      summary: (알림용) 멘티 미완료 투두 확인
      description: >
        ## 개요
        
        멘티의 미완료 투두가 남아있는지 확인합니다. 오늘(조회일)의 투두만을 대상으로 하며, 오늘 이전의 투두는 미완료에 포함하지 않습니다.
      operationId: hasRemainingTodosToday
      responses:
        '200':
          description: 조회 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/RemainingTodosResponse'
  /mentees/my/goals/{menteeGoalId}/todos/{todoId}:
    patch:
      security:
        - bearerAuth: [ ]
      tags:
        - MenteeGoal
      summary: 멘티의 목표 투두 상태 업데이트
      description: >
        ## 개요
        
        멘티의 목표에 대해 투두 상태를 업데이트 합니다.
        
        ## 요청 설명
        
        요청에 들어있는 `todo_status`로 투두의 상태를 변경합니다. 사용할 수 있는 상태는 다음과 같습니다.
        
        ### todo_status: 투두의 상태
          - `TODO`: 진행 중인 투두
          - `COMPLETED`: 완료된 투두
        
        ## 응답 설명
        
        변경된 투두 정보를 반환합니다.

      operationId: updateTodoStatus
      parameters:
        - name: menteeGoalId
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: 멘티목표 ID
        - name: todoId
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: 투두 ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                todo_status:
                  type: string
                  enum:
                    - TODO
                    - COMPLETED
                  description: 투두 상태
      responses:
        '200':
          description: 업데이트 성공. 업데이트된 투두 정보를 반환합니다.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/MenteeGoalTodoResponse'

  /mentors/my/goals/{menteeGoalId}/mentor-letter:
    put:
      security:
        - bearerAuth: [ ]
      tags:
        - Mentor
      summary: 멘토 레터 작성
      description: 멘토가 특정 menteeGoal에 대해 mentor_letter를 작성합니다.
      operationId: updateMentorLetter
      parameters:
        - name: menteeGoalId
          in: path
          required: true
          description: 멘티 목표 ID
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MentorLetterRequest'
      responses:
        '200':
          description: 멘토 레터 작성 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/MenteeGoalSummaryResponse'
  # Comments
  /comment-rooms/my:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - Comment
      summary: "[공통] 코멘트 룸 리스트 조회"
      description: >
        ## 개요
        
        코멘트 룸 목록을 조회합니다.
      operationId: getCommentRooms
      parameters:
        - name: page
          in: query
          description: 페이지 번호 (1부터 시작)
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: size
          in: query
          description: 페이지당 아이템 수
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
      responses:
        '200':
          description: 조회 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/CommentRoomPagingResponse'

  /comment-rooms/{roomId}/comments:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - Comment
      summary: 멘티의 목표 코멘트 조회
      description: >
        ## 개요
        
        멘토-멘티 간 주고받은 코멘트를 조회합니다.
        
        코멘트는 최신 날짜부터 내림차순으로 정렬되며, 페이지네이션이 적용됩니다.
        
        ## 응답 설명
        
        ### writer_role: 코멘트 작성자의 역할
          - `MENTOR`: 멘토
          - `MENTEE`: 멘티
      operationId: getComments
      parameters:
        - name: roomId
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: 코멘트 룸 ID
        - name: page
          in: query
          description: 페이지 번호 (1부터 시작)
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: size
          in: query
          description: 페이지당 아이템 수
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
      responses:
        '200':
          description: 조회 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/CommentPagingResponse'
    post:
      security:
        - bearerAuth: [ ]
      tags:
        - Comment
      summary: "[멘티] 코멘트 작성"
      description: >
        ## 개요
        
        멘티가 목표에 대해 코멘트를 작성합니다. 코멘트 최대 길이는 300자이며, 하루 1회만 작성 가능합니다.

      operationId: addCommentFromMentee
      parameters:
        - name: roomId
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: 코멘트 룸 ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentRequest'
      responses:
        '200':
          description: 조회 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/CommentResponse'

  /comments/{commentId}:
    patch:
      security:
        - bearerAuth: [ ]
      tags:
        - Comment
      summary: 멘티가 작성한 코멘트 수정
      description: >
        ## 개요
        
        멘티가 작성한 코멘트를 수정합니다. 코멘트 최대 길이는 300자 입니다.
      operationId: updateCommentFromMentee
      parameters:
        - name: commentId
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: 코멘트 ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentRequest'
      responses:
        '200':
          description: 수정 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/CommentResponse'
    delete:
      security:
        - bearerAuth: [ ]
      tags:
        - Comment
      summary: 멘티의 목표 코멘트 삭제
      description: 멘티의 목표에 대한 코멘트를 삭제합니다.
      operationId: deleteCommentFromMentee
      parameters:
        - name: commentId
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: 코멘트 ID
      responses:
        '200':
          description: 삭제 성공

components:
  schemas:
    # Request Dto
    OAuthRequest:
      type: object
      properties:
        identity_token:
          type: string
        nonce:
          type: string
        provider:
          type: string
          enum:
            - KAKAO
            - APPLE
      required:
        - identity_token
        - provider
      example:
        identity_token: identity_token
        nonce: 임의의 nonce 값
        provider: KAKAO

    GoalCreateRequest:
      type: object
      properties:
        mentor_id:
          type: integer
          format: int64
          example: 1
        title:
          type: string
          description: 목표 제목
          example: "다온과 함께하는 영어 완전 정복 30일 목표"
        participants_limit:
          type: integer
          example: 10
        topic:
          type: string
          description: 목표 주제
          example: "영어"
        period:
          type: integer
          example: 30
        daily_duration:
          type: integer
          example: 4
        description:
          type: string
          description: 목표에 대한 설명
          example: "영어를 하고 싶었지만 어떤 방법으로 해야 할지 고민이 많지 않았나요?"
        mid_objectives:
          type: array
          items:
            $ref: '#/components/schemas/MidObjectiveRequest'
        weekly_objectives:
          type: array
          items:
            $ref: '#/components/schemas/WeeklyObjectiveRequest'
        todo_list:
          type: array
          items:
            $ref: '#/components/schemas/TodoRequest'
        thumbnail_images:
          type: array
          items:
            $ref: '#/components/schemas/ImageRequest'
        content_images:
          type: array
          items:
            $ref: '#/components/schemas/ImageRequest'
      required:
        - mentor_id
        - title
        - participants_limit
        - topic
        - period
        - daily_duration
        - description
        - mid_objectives
        - weekly_objectives
        - todo_list
        - thumbnail_images
        - content_images
    MidObjectiveRequest:
      type: object
      properties:
        sequence:
          type: integer
          example: 1
        description:
          type: string
          description: 중간 목표 설명
          example: "영어로 원어민과 편안하게 대화하는 법"
      required:
        - sequence
        - description
    WeeklyObjectiveRequest:
      type: object
      properties:
        week_number:
          type: integer
          example: 1
        description:
          type: string
          description: 목표 주차별 상세 설명
          example: "간단한 단어부터 시작하기"
      required:
        - week_number
        - description
    TodoRequest:
      type: object
      properties:
        todo_date:
          type: string
          format: date
          example: "2025-02-20"
        estimated_minutes:
          type: integer
          example: 30
        description:
          type: string
          description: 투두 설명
          example: "오늘은 30분 영어 단어 외우기"
        mentor_tip:
          type: string
          description: 멘토의 팁
          example: "단어를 외울 때, 뜻을 함께 외워보세요."
      required:
        - todo_date
        - estimated_minutes
        - description
    ImageRequest:
      type: object
      properties:
        sequence:
          type: integer
          example: 1
        imageUrl:
          type: string
          example: "https://image.url"
      required:
        - sequence
        - imageUrl
    CommentRequest:
      type: object
      properties:
        comment:
          type: string
          description: 코멘트 내용
          maxLength: 300
          example: "멘토님, 오늘은 어떤 공부를 해야 할까요?"
      required:
        - comment
    MentorLetterRequest:
      type: object
      properties:
        mentor_letter:
          type: string
          description: 멘토 레터 내용
          example: "멘티에게 전하는 격려 메시지입니다."
      required:
        - mentor_letter

    # Response Dto
    LoginResponse:
      type: object
      properties:
        access_token:
          type: string
          example: <header>.<payload>.<signature>
        refresh_token:
          type: string
          example: <header>.<payload>.<signature>
      required:
        - access_token
        - refresh_token
    MenteeInfoResponse:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        in_progress_goal_count:
          type: integer
        completed_goal_count:
          type: integer
        free_participation_count:
          type: integer
        mentee_status:
          type: string
          enum:
            - PENDING
            - ACTIVE
            - DELETED
    NameAvailabilityResponse:
      type: object
      properties:
        is_available:
          type: boolean
          example: false  # false면 닉네임이 이미 사용 중

    # Goal 관련
    GoalCommonInfo:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        title:
          type: string
          description: 목표 제목
          example: "다온과 함께하는 영어 완전 정복 30일 목표"
        topic:
          type: string
          description: 목표 주제
          example: "영어"
        description:
          type: string
          description: 목표에 대한 설명
          example: "영어를 하고 싶었지만 어떤 방법으로 해야 할 지, 루틴을 세우지만 어떤 방법이 효율적일지 고민이 많지 않았나요?"
        period:
          type: integer
          example: 30
        daily_duration:
          type: integer
          example: 4
        participants_limit:
          type: integer
          example: 10
        current_participants:
          type: integer
          example: 5
        is_closing_soon:
          type: boolean
          example: true
        goal_status:
          $ref: '#/components/schemas/GoalStatusEnum'
        mentor_name:
          type: string
          description: 멘토 이름
          example: "다온"
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    GoalStatusEnum:
      type: string
      enum:
        - UPCOMING
        - OPEN
        - CLOSED
      example:
        OPEN

    # GoalSummary
    GoalSummaryResponse:
      type: object
      allOf:
        - $ref: '#/components/schemas/GoalCommonInfo'
        - type: object
          properties:

            main_image:
              type: string
              example: "https://main-image.url"
    GoalSummaryPagingResponse:
      type: object
      properties:
        goals:
          type: array
          items:
            $ref: '#/components/schemas/GoalSummaryResponse'
        page:
          $ref: '#/components/schemas/PageResponse'

    # GoalDetail
    GoalDetailResponse:
      type: object
      allOf:
        - $ref: '#/components/schemas/GoalCommonInfo'
        - type: object
          properties:
            weekly_objectives:
              type: array
              items:
                $ref: '#/components/schemas/WeeklyObjectiveResponse'
            mid_objectives:
              type: array
              items:
                $ref: '#/components/schemas/MidObjectiveResponse'
            thumbnail_images:
              type: array
              items:
                $ref: '#/components/schemas/ImageResponse'
            content_images:
              type: array
              items:
                $ref: '#/components/schemas/ImageResponse'
    WeeklyObjectiveResponse:
      type: object
      properties:
        week_number:
          type: integer
          description: 현재 주차
          example: 1
        description:
          type: string
          description: 목표 주차별 상세 설명
          example: "간단한 단어부터 시작하기"
    MidObjectiveResponse:
      type: object
      properties:
        sequence:
          type: integer
          description: 현재 주차
          example: 1
        description:
          type: string
          description: 중간 목표 설명
          example: "영어로 원어민과 편안하게 대화하는 법"
    ImageResponse:
      type: object
      properties:
        sequence:
          type: integer
          example: 1
        imageUrl:
          type: string
          example: "https://image.url"

    # MenteeGoal 관련
    MenteeGoalSummaryResponse:
      type: object
      allOf:
        - type: object
          properties:
            id:
              type: integer
              format: int64
              example: 1
            title:
              type: string
              description: 목표 제목
              example: "다온과 함께하는 영어 완전 정복 30일 목표"
            topic:
              type: string
              description: 목표 주제
              example: "영어"
            mentor_name:
              type: string
              description: 멘토 이름
              example: "다온"
            main_image:
              type: string
              example: "https://main-image.url"
            start_date:
              type: string
              format: date
            end_date:
              type: string
              format: date
            mentor_letter:
              type: string
            today_todo_count:
              type: integer
              example: 5
            today_completed_count:
              type: integer
              example: 3
            today_remaining_count:
              type: integer
              example: 2
            total_todo_count:
              type: integer
              example: 100
            total_completed_count:
              type: integer
              example: 50
            comment_room_id:
              type: integer
              format: int64
            mentee_goal_status:
              $ref: '#/components/schemas/MenteeGoalStatusEnum'
            created_at:
              type: string
              format: date-time
            updated_at:
              type: string
              format: date-time
    MenteeGoalDailyProgressResponse:
      type: object
      properties:
        date:
          type: string
          format: date
        day_of_week:
          type: string
          example: MONDAY
        daily_todo_count:
          type: integer
          example: 5
        completed_daily_todo_count:
          type: integer
          example: 3
        is_valid:
          type: boolean
          example: true
    MenteeGoalWeeklyProgressResponse:
      type: object
      properties:
        progress:
          type: array
          items:
            $ref: '#/components/schemas/MenteeGoalDailyProgressResponse'
        has_last_week:
          type: boolean
        has_next_week:
          type: boolean

    MenteeGoalStatusEnum:
      type: string
      enum:
        - IN_PROGRESS
        - COMPLETED
        - FAILED
        - CANCELED
    MenteeGoalSummaryPagingResponse:
      type: object
      properties:
        mentee_goals:
          type: array
          items:
            $ref: '#/components/schemas/MenteeGoalSummaryResponse'
        page:
          $ref: '#/components/schemas/PageResponse'

    MenteeGoalDailyDetailResponse:
      type: object
      properties:
        date:
          type: string
          format: date
        mentee_goal:
          $ref: '#/components/schemas/MenteeGoalSummaryResponse'
        todos:
          type: array
          items:
            $ref: '#/components/schemas/MenteeGoalTodoResponse'
    MenteeGoalTodoResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        todo_date:
          type: string
          format: date
          description: 투두 진행 날짜
        estimated_minutes:
          type: integer
          description: 예상 소요 시간
          example: 50
        description:
          type: string
          description: 투두 설명
          example: "영어 단어 보카 30개 암기"
        mentor_tip:
          type: string
          description: 멘토 팁
          example: "예문을 반드시 5회 이상 읽어보세요!"
        todo_status:
          type: string
          example: "TODO"
    RemainingTodosResponse:
      type: object
      properties:
        hasRemainingTodosToday:
          type: boolean

    CommentResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        comment:
          type: string
        commented_at:
          type: string
          format: date-time
        writer:
          type: string
        writer_role:
          type: string
    CommentPagingResponse:
      type: object
      properties:
        comments:
          type: array
          items:
            $ref: '#/components/schemas/CommentResponse'
        page:
          $ref: '#/components/schemas/PageResponse'

    CommentRoomPagingResponse:
      type: object
      properties:
        comment_rooms:
          type: array
          items:
            $ref: '#/components/schemas/CommentRoomResponse'
        page:
          $ref: '#/components/schemas/PageResponse'
    CommentRoomResponse:
      type: object
      properties:
        comment_room_id:
          type: integer
          format: int64
        mentee_goal_id:
          type: integer
          format: int64
        mentee_goal_title:
          type: string
        start_date:
          type: string
          format: date
        end_date:
          type: string
          format: date
        mentor_name:
          type: string
        mentor_profile_image:
          type: string
        new_comments_count:
          type: integer
          format: int64
      required:
        - mentor_profile_image

    # Paging
    PageResponse:
      type: object
      properties:
        totalElements:
          type: integer
          description: 전체 아이템 개수
          example: 123
        totalPages:
          type: integer
          description: 전체 페이지 수
          example: 13
        currentPage:
          type: integer
          description: 현재 페이지 번호
          example: 2
        pageSize:
          type: integer
          description: 한 페이지당 아이템 수
          example: 10
        nextPage:
          type: integer
          description: 다음 페이지 번호 (다음 페이지가 없으면 null)
          example: 3
        prevPage:
          type: integer
          description: 이전 페이지 번호 (이전 페이지가 없으면 null)
          example: 1
        hasNext:
          type: boolean
          description: 다음 페이지 존재 여부
          example: true
        hasPrev:
          type: boolean
          description: 이전 페이지 존재 여부
          example: true
      required:
        - totalElements
        - totalPages
        - currentPage
        - pageSize
        - nextPage
        - prevPage
        - hasNext
        - hasPrev

    # 공통응답. Data 필드를 제외한 부분이며, Data 필드에 들어갈 정보는 Response component에 정의
    ApiResponse:
      type: object
      properties:
        status:
          type: string
          enum:
            - SUCCESS
            - ERROR
        code:
          type: string
          example: 200
        message:
          type: string
          example: 정상적으로 처리되었습니다.
      required:
        - status
        - code
        - message

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
